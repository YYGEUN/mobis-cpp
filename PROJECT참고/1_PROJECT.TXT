// PROJECT
// 1. 쉬실 분들은 쉬시면서 자유롭게 하시면 됩니다. 점심 시간은 11:40 ~ 이후에 자유롭게 하시면 됩니다.

// 2. PROJECT 진행이 어려우신 분들은 git 에 "PROJECT_참고하세요.txt" 파일을 참고해 보세요
//    => github.com/codenuri/mobis  에 "PROJECT 참고" 폴더에 있습니다.

// 3. skeleton.cpp - 전체 뼈대가 어려우신 분은 참고 하세요.
// => 구조를 변경해서 사용하셔도 되고, 하고 싶은 대로 해보세요

// 4. menu_사용시_참고하세요1.cpp,  menu_사용시_참고하세요2.cpp 올려 놓았습니다.

// 5. 제품의 상태 변경시 알림 기능 
// => sms1, sms2 파일 참고 하세요
// => sms1.cpp 소스에서 std::map 의 개념과 간단한 사용법을 익히세요
// => sms2.cpp 소스를 이해해 보세요. 여러분의 Project에서 사용해 보세요
//    하실수 있는 분은 SMSManager 클래스를 수정해서 사용 하셔도 됩니다.
// => "singleton_이라는코딩패턴에대한 소개" 도 참고해 보세요 

// 6. 스마트 포인터를 도입하는 방법에 대한 소개가 ptr1.cpp   ptr2.cpp 에 있습니다

// 7. 기반 클래스 멤버를 초기화하는 방법.cpp  라는 소스를 추가했습니다.
// => 관심있는 분들은 확인해 보세요

// 8. "주된 자료 구조를 map 으로 사용하는 방법.cpp" 라는 소스를 추가해 놓았습니다.

// 9. "vector 에서 검색하는 방법.cpp" 추가해 놓았습니다.
// => "제품을 삭제" 할때 참고해 보세요 

// 10. cin1, cin2, cin3 소스 추가해 놓았습니다.
// => std::cin 을 입력시 잘못 입력를 처리하는 기법 입니다.
 
// 11. vector에 std::remove 를 사용하는 경우.cpp 추가해 놓았습니다.

// 12. iterator1 ~ 3.cpp  올려 놓았습니다
// => iterator 개념이 부족한 분들은 참고 하세요 

// 13. lambda1 ~ 4.cpp 올려 놓았습니다.
// => 람다 표현식 개념이 부족한 분들은 참고 하세요


// 14. bind_ref.cpp 올려 놓았습니다.
// => std::bind 사용시 참조로 고정하려면 "std::ref" 가 필요하다는 내용의 소스 입니다.


// 15. for_each1~2.cpp 올려 놓았습니다.
// => vector 안의 있는 모든 객체에 대해 특정 멤버 함수(display등)을 호출하기 위해
// => std::for_each 라는 함수를 사용하는 기법을 정리해 놓았습니다.
// => 필요하신분은 참고 하세요

// 16. factory1~5.cpp 올렸습니다. 어려운 내용입니다.
// => 참고하실분 확인해 보세요 

// [참고]
// 코드를 어느 정도 만들어 놓고 보면 "코드가 중복되고, 지저분해지는 것"을 느끼게 됩니다.
// => 이렇때, 코드의 기능을 변경하거나 추가 하는 것이 아니라
// => 기존 코드의 구조만 보기좋게 변경하는 과정을 "Refactoring" 이라고 합니다.

// => 어떻게 하면 기존 코드를 좋은 구조의 코드로 변경할수 있을까 ?? 라는 분야도 하나의 "학문" 입니다

// => 구글에서 "Refactoring" 검색하면 "검정색 표지의 책" 을 볼수 있습니다. 
// => 읽어 보면 좋긴한데, 책의 예제가 C/C++ 이 아닌 java 라서 좀 어려울수 있습니다.

// => 아무리 뛰어난 개발자가 개발해도 결국 초기 버전은 지저분한 코드가 존재 합니다.
// => Refactoring 을 거쳐서 좋은 코드로 변경하게 됩니다.

